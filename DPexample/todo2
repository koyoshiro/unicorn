let hero = {
  name: '赵云',
  hp: 100,
  sp: 100,
  equipment: ['马', '长枪']
}

class Dep {
  constructor() {
    this.deps = new Set();
  }

  depend() {
    console.log(this.deps);
    if (Dep.target && this.deps.indexOf(Dep.target) === -1) {
      this.deps.push(Dep.target)
    }
  }

  notify() {
    this.deps.forEach((dep) => {
      dep()
    })
  }
}

class Water {
  constructor(obj, key, cb, onComputedUpdate) {
    this.obj = obj;
    this.key = key
    this.cb = cb
    this.onComputedUpdate = onComputedUpdate
    return this.defineComputed()
  }

  handler = {
    get(target, name, receiver) {
      console.log(`我的${name}属性被读取了！`);
      //todo 加入观察者队列 

      return Reflect.get(target, name, receiver);
    },
    set(target, name, value, receiver) {
      console.log(`我的${name}属性被修改为${value}了！`);
      //内部调用对应的 Reflect 方法
      const result = Reflect.set(target, name, value, receiver);
      //执行观察者队列
      observableArray.forEach(item => item());
      return result;
    }
  }
}




//初始化Proxy对象，设置拦截操作
const createProxy = (obj) => new Proxy(obj, handler);

//初始化观察者队列
const observableArray = new Set();

const heroProxy = createProxy(hero);

// const heroProxy1 = createProxy(hero.equipment);

//将监听函数加入队列
observableArray.add(() => {
  console.log(heroProxy.name);
});

// observableArray.add(() => {
//   console.log(heroProxy1);
// });


heroProxy.name = "黄忠";
// heroProxy.hp = 500;

// heroProxy1.push('aaa');
// --> 黄忠

